cmake_minimum_required(VERSION 3.18)
project(trt_infer LANGUAGES CXX CUDA)

# Use ccache to speed up rebuilds
include(cmake/ccache.cmake)

# Set C++ version and optimization level
set(CMAKE_CXX_STANDARD 17)
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Ofast -DNDEBUG -Wno-deprecated-declarations")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_DEBUG_POSTFIX "d")
SET(CMAKE_CUDA_ARCHITECTURES "52;61;75;86")
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON) 

# For finding FindTensorRT.cmake
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

SET(3rdlib_DIR "D:/Libraries/")
SET(TensorRT_DIR "${3rdlib_DIR}/TensorRT")
SET(OpenCV_DIR "${3rdlib_DIR}/OpenCV-cuda")
# TODO: Specify the path to TensorRT root dir
IF (NOT TensorRT_DIR)
    set(TensorRT_DIR /home/cyrus/work/libs/TensorRT-8.6.1.6/)
ENDIF()
# Use the correct version of CUDA
MESSAGE(STATUS "PROJECT_NAME: ${PROJECT_NAME}")

IF(UNIX)
	SET(CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda)
ENDIF()

# We require CUDA, OpenCV, and TensorRT
FIND_PACKAGE(TensorRT REQUIRED)
FIND_PACKAGE(CUDA REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} ${CUDA_INCLUDE_DIRS} ${TensorRT_INCLUDE_DIRS})

FILE(GLOB SRC_LIST "src/*.h" "src/*.hpp" "src/*.cpp" "src/*.cxx" "src/*.cu") #GLOB_RECURSE
MESSAGE(STATUS "SRC_LIST: ${SRC_LIST}")

ADD_EXECUTABLE(${PROJECT_NAME} ${SRC_LIST})

TARGET_LINK_LIBRARIES(${PROJECT_NAME}  ${OpenCV_LIBS} ${CUDA_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${TensorRT_LIBRARIES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES CUDA_ARCHITECTURES "52;61;75;86")